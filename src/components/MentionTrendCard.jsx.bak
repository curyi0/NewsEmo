import React, { useState, useMemo, useEffect } from 'react';
import { Card, Button, Space } from 'antd';
import { Line } from '@ant-design/plots';
import { useSelector } from 'react-redux';
import dayjs from 'dayjs';
import isoWeek from 'dayjs/plugin/isoWeek';
dayjs.extend(isoWeek);

const MentionTrendCard = ({ onMaxDateChange, height }) => {
  const company = useSelector((state) => state.company);
  const [viewMode, setViewMode] = useState('day');

  const rawData = useMemo(()=> [
    { date: '2025-06-01', value: 20 },
    { date: '2025-06-02', value: 35 },
    { date: '2025-06-03', value: 25 },
    { date: '2025-06-04', value: 40 },
    { date: '2025-06-05', value: 38 },
    { date: '2025-06-06', value: 50 },
    { date: '2025-06-07', value: 30 },
    { date: '2025-06-08', value: 27 },
    { date: '2025-06-09', value: 33 },
    { date: '2025-06-10', value: 42 },
    { date: '2025-06-11', value: 37 },
    { date: '2025-06-12', value: 65 },
    { date: '2025-06-13', value: 48 },
    { date: '2025-06-14', value: 28 },
    { date: '2025-06-15', value: 36 },
  ], []);

  const groupBy = (unit) => {
    const grouped = {};
    rawData.forEach(({ date, value }) => {
      const key =
        unit === 'week'
          ? dayjs(date).startOf('isoWeek').format('YYYY-[W]WW')
          : dayjs(date).format('YYYY-MM');
      grouped[key] = (grouped[key] || 0) + value;
    });

    return Object.entries(grouped)
      .map(([date, value]) => ({ date, value }))
      .sort((a, b) => (a.date > b.date ? 1 : -1));
  };

  const chartData = useMemo(() => {
    if (viewMode === 'week') return groupBy('week');
    if (viewMode === 'month') return groupBy('month');
    return rawData;
  }, [viewMode]);

  useEffect(() => {
    const maxValueDate = rawData.reduce((max, curr) =>
      curr.value > max.value ? curr : max
    );
    onMaxDateChange(maxValueDate.date);
  }, [rawData, onMaxDateChange]);

  const config = {
    data: chartData,
    xField: 'date',
    yField: 'value',
    height,
    smooth: true,
    autoFit: true, // 반응형 차트
    point: {
      size: 5,
      shape: 'diamond',
    },
    
interaction: {
  tooltip: {
    marker: false,
  },
},

    slider: {
      start: 0,
      end: 1,
    },
  };

  return (
    <Card
      title="언급량 추이"
      style={{ width: '100%', borderRadius: '20px' }} 
      bodyStyle={{ paddingBottom: 0 }}
      extra={
        <Space.Compact style={{ flexWrap: 'wrap' }}>
          <Button
            size="middle"
            type="default"
            style={{
              borderRadius: '6px 0 0 6px',
              border: '2px solid',
              borderColor: viewMode === 'day' ? '#1677ff' : '#d9d9d9',
              color: '#1677ff',
              backgroundColor: '#fff',
            }}
            onClick={() => setViewMode('day')}
          >
            일별
          </Button>
          <Button
            size="middle"
            type="default"
            style={{
              borderRadius: 0,
              border: '2px solid',
              borderColor: viewMode === 'week' ? '#1677ff' : '#d9d9d9',
              color: '#1677ff',
              backgroundColor: '#fff',
            }}
            onClick={() => setViewMode('week')}
          >
            주별
          </Button>
          <Button
            size="middle"
            type="default"
            style={{
              borderRadius: '0 6px 6px 0',
              border: '2px solid',
              borderColor: viewMode === 'month' ? '#1677ff' : '#d9d9d9',
              color: '#1677ff',
              backgroundColor: '#fff',
            }}
            onClick={() => setViewMode('month')}
          >
            월별
          </Button>
        </Space.Compact>
      }
    >
      <Line {...config} />
    </Card>
  );
};

export default MentionTrendCard;
